#!/usr/bin/env node

/**
 * Module dependencies.
 */
const nconf = require('nconf')
global.nconf = nconf

nconf.argv()
    .env()
    .add('global', { file: __dirname + '/../config/' + process.env.NODE_ENV + '.json',
      type: 'file' })
    .add('user', { file: __dirname + '/../config/default.json',
      type: 'file' })

const app = require('../app')
const debug = require('debug')('dealer-site-node:server')
const https = require('https')
const http = require('http')
const compression = require('compression')


const server = http.createServer(app)

// list of available spreadsheets


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

const port = process.env.PORT || normalizePort(nconf.get('listen_port'))

/**
 * Event listener for HTTP server 'error' event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(bind + ' requires elevated privileges')
    process.exit(1)
    break
  case 'EADDRINUSE':
    console.error(bind + ' is already in use')
    process.exit(1)
    break
  default:
    throw error
  }
}

/**
 * Event listener for HTTP server 'listening' event.
 */

function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `Port: ${addr.port}`
  debug('Listening on ' + bind)
  console.log(`Started On ${bind}`)
}

/**
·* Global Variable and Function
·*/

global.Promise  = require('bluebird')
global.nconf    = require('nconf')

/**
 * Get port from environment and store in Express.
 */

app.use(compression())
app.set('port', port)

/**
 * Create HTTP server.
 */

http.globalAgent.maxSockets = Infinity
https.globalAgent.maxSockets = Infinity

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)
